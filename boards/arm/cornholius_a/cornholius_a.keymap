/*
 * Copyright (c) 2024 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#include "elpekenin/behaviors.dtsi"

#include "keys_es.h"

#define _DEF 0
#define _NAV 1
#define _SYM 2
#define _UTL 3

/ {
    mod_morphs {
        M_BSP: bspc_or_del {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;
            mods = <(MOD_LSFT)>;
        };

        M_VOL: volup_or_voldn {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp C_VOL_UP>, <&kp C_VOL_DN>;
            mods = <(MOD_LSFT)>;
        };
    };

    macros {
        led_sleep: indicator_and_soft_off {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&gpio 1 GPIO_TOG>, <&soft_off>;
        };

        __SPC: space_times_4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPC>,
                       <&kp SPC>,
                       <&kp SPC>,
                       <&kp SPC>;
        };
    };

    tap_dances {
        T_Z: z_lt_gt {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp Z>, <&kp ES_LT>, <&kp ES_GT>;
        };

        T_ACT: acute_ntilde {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp ES_ACUTE>, <&kp ES_N_TILDE>;
        };

        T_SPC: space_indent {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp SPC>, <&__SPC>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <_NAV _SYM>;
            then-layer = <_UTL>;
        };
    };

    layer_callbacks {
        compatible = "elpekenin,layer-callback";
        utils_on {
            layer = <_UTL>;
            event = "on-activation";
            bindings = <&gpio 0 GPIO_ON>;
        };
        utils_off {
            layer = <_UTL>;
            event = "on-deactivation";
            bindings = <&gpio 0 GPIO_OFF>;
        };
    };

    combos {
        compatible = "zmk,combos";

        CTL_Z: ctrl_z_hack {
            timeout-ms = <50>;
            key-positions = <25 36>;
            bindings = <&kp LC(Z)>
        };
    };
};

/* logic inverted to make stay ON during use, OFF while sleeping */
&blue {
    gpios = <&gpio1 2 GPIO_ACTIVE_HIGH>;
};

/* make soft-off toggle GPIO used for LED sleep state */
&soft_off_callback {
    bindings = <&led_sleep>;
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
                &kp TAB       &kp Q         &kp W         &kp E         &kp R         &kp T         /**/     &kp Y         &kp U         &kp I         &kp O         &kp P         &M_BSP
                &none         &kp A         &kp S         &kp D         &kp F         &kp G         /**/     &kp H         &kp J         &kp K         &kp L         &T_ACT        &kp ES_PLUS
                &kp LSHFT     &T_Z          &kp X         &kp C         &kp V         &kp B         /**/     &kp N         &kp M         &kp COMMA     &kp DOT       &kp ES_MINUS  &kp ES_GRAVE
                &kp LCTRL     &kp LGUI      &kp LGUI      &kp LALT      &mo _NAV      &T_SPC        /**/     &kp ENTER     &mo _SYM      &kp RALT      &none         &none         &M_VOL
            >;
        };

        navigation {
            bindings = <
                &kp ESC       &kp N1        &kp N2        &kp N3        &kp N4        &kp N5        /**/     &kp N6        &kp N7        &kp N8        &kp N9        &kp N0       &trans
                &trans        &none         &none         &none         &none         &none         /**/     &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT     &none        &trans
                &trans        &none         &none         &none         &none         &none         /**/     &none         &none         &none         &none         &none        &trans
                &trans        &trans        &trans        &trans        &trans        &trans        /**/     &trans        &trans        &trans        &trans        &trans       &trans
            >;
        };

        symbols {
            bindings = <
                &kp ES_BSLH   &none         &none         &none         &none         &none         /**/     &none         &kp ES_IQMARK &kp ES_QMARK  &none         &kp ES_SQT    &trans
                &trans        &none         &none         &none         &none         &none         /**/     &none         &kp ES_LBKT   &kp ES_RBKT   &none         &none         &trans
                &trans        &none         &none         &none         &none         &none         /**/     &none         &kp ES_LBRC   &kp ES_RBRC   &none         &none         &trans
                &trans        &trans        &trans        &trans        &trans        &trans        /**/     &trans        &trans        &trans        &trans        &trans        &trans
            >;
        };

        utils {
            bindings = <
                &kp F12       &kp F1        &kp F2        &kp F3        &kp F4        &kp F5        /**/     &kp F6        &kp F7        &kp F8        &kp F9        &kp F10       &kp F11
                &bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &none         &sys_reset    /**/     &none         &none         &none         &none         &none         &trans
                &trans        &none         &none         &none         &none         &bootloader   /**/     &none         &none         &none         &none         &none         &trans
                &trans        &trans        &trans        &trans        &trans        &trans        /**/     &trans        &trans        &trans        &trans        &trans        &trans
            >;
        };
    };
};
